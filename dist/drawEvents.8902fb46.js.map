{"version":3,"sources":["scripts/drawEvents.js"],"names":["$","click","toggle","change","refreshDraw","toggleDraw","addDraw","addClass","removeDraw","toggleSnap","map","removeInteraction","snap","text","removeClass","toggleModify","addModify","removeModify","addSnap","removeSnap","drawselect","getFeatures","getArray","feature","getLayer","selectSource","getSource","removeFeature","remove","lastColor","e","color","target","id","selectedSource","redObject","source","orangeObject","yellowObject","greenObject","blueObject","purpleObject","drawSource","html","output","getGeometry","getType","polygon","area","Sphere","getArea","Math","round","circle","polyCircle","PolygonGeom","fromCircle","line","length","getLength","toggleFreehand"],"mappings":"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","file":"drawEvents.8902fb46.js","sourceRoot":"..","sourcesContent":["//Script for managing drawings.\r\n$(\"#buttonHide\").click( () => \r\n{ $(\"#drawbox\").toggle() })\r\n\r\n$('#type').change( () => \r\n{ refreshDraw() })\r\n\r\n$('#draw').click( () =>\r\n{ \r\n    if ( toggleDraw )\r\n    {\r\n        addDraw()\r\n        // $('#draw').attr(\"src\", \"images/draw_on.png\")\r\n        // $('#draw').css('border-color', '#ff4500ff')\r\n        $('#draw').addClass('selectedFunction')\r\n    }\r\n    else\r\n    {\r\n        removeDraw()\r\n        // $('#draw').attr(\"src\", \"images/draw_off.png\")\r\n        if ( toggleSnap == true )\r\n        {   \r\n            toggleSnap = false;\r\n            map.removeInteraction(snap);\r\n            $('#snapToggle').text(\"Start snap\")\r\n        }\r\n        // $('#draw').css('border-color', '#ff450000')\r\n        $('#draw').removeClass('selectedFunction')\r\n    }\r\n    toggleDraw = !toggleDraw \r\n})\r\n\r\n$('#modifyLayer').click( () => \r\n{ \r\n    if ( toggleModify )\r\n    {\r\n        addModify()\r\n        $('#modifyLayer').text(\"Stop Modify\")\r\n    }\r\n    else\r\n    {        \r\n        removeModify()\r\n        $('#modifyLayer').text(\"Start Modify\")\r\n\r\n    }\r\n    toggleModify = !toggleModify\r\n})\r\n\r\n$('#snapToggle').click( () => \r\n{\r\n    if ( toggleSnap )\r\n    {        \r\n        addSnap()\r\n        $('#snapToggle').text(\"Stop Snap\")\r\n    }\r\n    else\r\n    {\r\n        removeSnap()\r\n        $('#snapToggle').text(\"Start Snap\")\r\n    }\r\n    toggleSnap = !toggleSnap\r\n})\r\n\r\n\r\n$('#deleteLayer').click( () => \r\n{\r\n    if( drawselect.getFeatures().getArray()[0] != null )\r\n    {\r\n        feature = drawselect.getFeatures().getArray()[0]\r\n        if( drawselect.getLayer(feature) != null )\r\n        {\r\n            let selectSource = drawselect.getLayer(feature).getSource()\r\n            selectSource.removeFeature(feature)\r\n            drawselect.getFeatures().remove(feature)\r\n        }\r\n    }  \r\n})\r\n\r\n\r\nlet lastColor = \"selectZero\";\r\n$('.colorOption').click( (e) =>\r\n{\r\n    let color = e.target.id\r\n    if( color != lastColor)\r\n    {\r\n        switch(color)\r\n        {\r\n            case \"selectRed\":\r\n                selectedSource = redObject.source\r\n                break\r\n        \r\n            case \"selectOrange\":\r\n                selectedSource = orangeObject.source\r\n                break\r\n                    \r\n            case \"selectYellow\":\r\n                selectedSource = yellowObject.source\r\n                break \r\n                            \r\n            case \"selectGreen\":\r\n                selectedSource = greenObject.source\r\n                break\r\n                \r\n            case \"selectBlue\":\r\n                selectedSource = blueObject.source\r\n                break\r\n                \r\n            case \"selectPurple\":\r\n                selectedSource = purpleObject.source\r\n                break\r\n            \r\n            default:\r\n                selectedSource = drawSource\r\n        }\r\n\r\n        $(\"#\"+color).addClass(\"selectedColor\")\r\n        $('#'+lastColor).removeClass(\"selectedColor\")\r\n        lastColor = color\r\n\r\n        refreshDraw()\r\n\r\n        if(!toggleModify)\r\n        {\r\n            removeModify()\r\n            addModify()\r\n        }\r\n    }\r\n})  \r\n\r\n$('#printMetric').click( () =>\r\n{ \r\n    $('#showMetrics').html( () => \r\n    {\r\n        feature = drawselect.getFeatures().getArray()[0]\r\n        let output = \"none selected\"\r\n        \r\n        if ( feature == null )\r\n        { return output }\r\n    \r\n        if ( feature.getGeometry().getType() == \"Polygon\" ) \r\n        {\r\n            const polygon = feature.getGeometry()\r\n            const area = Sphere.getArea(polygon)\r\n            \r\n            if ( area > 10000 ) \r\n            { output = (Math.round(area / 1000000 * 100) / 100) + ' ' + 'km<sup>2</sup>' } \r\n            else \r\n            { output = (Math.round(area * 100) / 100) + ' ' + 'm<sup>2</sup>' }\r\n            return output\r\n        }\r\n        else if ( feature.getGeometry().getType() == \"Circle\" ) \r\n        {  \r\n            const circle = feature.getGeometry()\r\n            const polyCircle = PolygonGeom.fromCircle(circle)\r\n            const area = Sphere.getArea(polyCircle)\r\n            \r\n            if ( area > 10000 ) \r\n            { output = (Math.round(area / 1000000 * 100) / 100) + ' ' + 'km<sup>2</sup>'} \r\n            else \r\n            { output = (Math.round(area * 100) / 100) + ' ' + 'm<sup>2</sup>' }\r\n            return output\r\n        }\r\n        else if ( feature.getGeometry().getType() == \"LineString\" )\r\n        {\r\n            const line = feature.getGeometry()\r\n            const length = Sphere.getLength(line)\r\n            \r\n            if ( length > 100 ) \r\n            { output = (Math.round(length / 1000 * 100) / 100) + ' ' + 'km' } \r\n            else \r\n            { output = (Math.round(length * 100) / 100) + ' ' + 'm' }\r\n            return output    \r\n        } \r\n    }) \r\n})\r\n\r\n$('#freehand').click( () =>\r\n{\r\n    if( toggleFreehand == false )\r\n    {\r\n        toggleFreehand = true;\r\n        $('#freehand').addClass('selectedFunction')\r\n        $('#straight').removeClass('selectedFunction')\r\n        // $('#straight').css('border-color', '#ff450000')\r\n        // $('#freehand').css('border-color', '#ff4500ff')\r\n        refreshDraw()\r\n    }\r\n})\r\n\r\n$('#straight').click( () =>\r\n{\r\n    if( toggleFreehand == true )\r\n    {\r\n        toggleFreehand = false;\r\n        $('#straight').addClass('selectedFunction')\r\n        $('#freehand').removeClass('selectedFunction')\r\n        // $('#straight').css('border-color', '#ff4500ff')\r\n        // $('#freehand').css('border-color', '#ff450000')\r\n        refreshDraw()\r\n    }\r\n})"]}